// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test loops statements (for, while) fix #122 1`] = `
Program {
  "children": Array [
    Foreach {
      "body": Array {
        "items": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "foo",
          },
        ],
        "kind": "array",
        "shortForm": false,
      },
      "key": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "bar",
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "foo",
      },
      "value": undefined,
    },
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"$k -> $v
\\"",
          "type": "string",
          "value": Array [
            Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "k",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " -> ",
              "unicode": false,
              "value": " -> ",
            },
            Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "v",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "
",
              "unicode": false,
              "value": "
",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "VARIABLE",
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, unexpected 'array' (T_ARRAY) on line 2",
      "token": "'array' (T_ARRAY)",
    },
    Error {
      "expected": ")",
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, unexpected 'array' (T_ARRAY), expecting ')' on line 2",
      "token": "'array' (T_ARRAY)",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, unexpected ')', expecting ';' on line 2",
      "token": "')'",
    },
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, unexpected ')' on line 2",
      "token": "')'",
    },
    Error {
      "expected": ";",
      "kind": "error",
      "line": 3,
      "message": "Parse Error : syntax error, unexpected 'echo' (T_ECHO), expecting ';' on line 3",
      "token": "'echo' (T_ECHO)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test loops statements (for, while) fix #122 2`] = `
Program {
  "children": Array [
    Foreach {
      "body": Echo {
        "arguments": Array [
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"$k -> $v
\\"",
            "type": "string",
            "value": Array [
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "k",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " -> ",
                "unicode": false,
                "value": " -> ",
              },
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "v",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "
",
                "unicode": false,
                "value": "
",
              },
            ],
          },
        ],
        "kind": "echo",
        "shortForm": false,
      },
      "key": List {
        "arguments": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "bar",
          },
        ],
        "kind": "list",
        "shortForm": true,
      },
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "foo",
      },
      "value": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "foo",
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 2,
      "message": "Fatal Error : Cannot use list as key element on line 2",
      "token": undefined,
    },
  ],
  "kind": "program",
}
`;

exports[`Test loops statements (for, while) test do 1`] = `
Program {
  "children": Array [
    Do {
      "body": Block {
        "children": Array [
          Echo {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"something\\"",
                "unicode": false,
                "value": "something",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "do",
      "test": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test loops statements (for, while) test for 1`] = `
Program {
  "children": Array [
    For {
      "body": Echo {
        "arguments": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        ],
        "kind": "echo",
        "shortForm": false,
      },
      "increment": Array [
        Post {
          "kind": "post",
          "type": "+",
          "what": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
        },
      ],
      "init": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
        Assign {
          "kind": "assign",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "0",
          },
        },
      ],
      "kind": "for",
      "shortForm": false,
      "test": Array [
        Bin {
          "kind": "bin",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "i",
          },
          "right": Number {
            "kind": "number",
            "value": "10",
          },
          "type": "<",
        },
        Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "ok",
        },
      ],
    },
    For {
      "body": Block {
        "children": Array [
          Echo {
            "arguments": Array [
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "ok",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
          Continue {
            "kind": "continue",
            "level": Number {
              "kind": "number",
              "value": "5",
            },
          },
          Continue {
            "kind": "continue",
            "level": Number {
              "kind": "number",
              "parenthesizedExpression": true,
              "value": "5",
            },
          },
        ],
        "kind": "block",
      },
      "increment": Array [],
      "init": Array [],
      "kind": "for",
      "shortForm": true,
      "test": Array [],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test loops statements (for, while) test foreach 1`] = `
Program {
  "children": Array [
    Foreach {
      "body": Echo {
        "arguments": Array [
          Encapsed {
            "kind": "encapsed",
            "raw": "\\"$k -> $v
\\"",
            "type": "string",
            "value": Array [
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "k",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": " -> ",
                "unicode": false,
                "value": " -> ",
              },
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "v",
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "
",
                "unicode": false,
                "value": "
",
              },
            ],
          },
        ],
        "kind": "echo",
        "shortForm": false,
      },
      "key": null,
      "kind": "foreach",
      "shortForm": false,
      "source": Variable {
        "byref": true,
        "curly": false,
        "kind": "variable",
        "name": "foo",
      },
      "value": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "v",
      },
    },
    Foreach {
      "body": Block {
        "children": Array [
          Echo {
            "arguments": Array [
              Encapsed {
                "kind": "encapsed",
                "raw": "\\"$a -> $b
\\"",
                "type": "string",
                "value": Array [
                  Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "a",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": " -> ",
                    "unicode": false,
                    "value": " -> ",
                  },
                  Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "b",
                  },
                  String {
                    "isDoubleQuote": false,
                    "kind": "string",
                    "raw": "
",
                    "unicode": false,
                    "value": "
",
                  },
                ],
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "key": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "kind": "foreach",
      "shortForm": true,
      "source": Array {
        "items": Array [
          Array {
            "items": Array [
              Number {
                "kind": "number",
                "value": "1",
              },
              Number {
                "kind": "number",
                "value": "2",
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
          Array {
            "items": Array [
              Number {
                "kind": "number",
                "value": "3",
              },
              Number {
                "kind": "number",
                "value": "4",
              },
            ],
            "kind": "array",
            "shortForm": true,
          },
        ],
        "kind": "array",
        "shortForm": true,
      },
      "value": List {
        "arguments": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
        ],
        "kind": "list",
        "shortForm": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test loops statements (for, while) test while test default form 1`] = `
Program {
  "children": Array [
    While {
      "body": Block {
        "children": Array [
          Echo {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"go\\"",
                "unicode": false,
                "value": "go",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": false,
      "test": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test loops statements (for, while) test while test short form 1`] = `
Program {
  "children": Array [
    While {
      "body": Block {
        "children": Array [
          Echo {
            "arguments": Array [
              String {
                "isDoubleQuote": true,
                "kind": "string",
                "raw": "\\"short\\"",
                "unicode": false,
                "value": "short",
              },
            ],
            "kind": "echo",
            "shortForm": false,
          },
        ],
        "kind": "block",
      },
      "kind": "while",
      "shortForm": true,
      "test": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
