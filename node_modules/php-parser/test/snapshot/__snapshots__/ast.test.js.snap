// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test AST structure #176 - lost \`?>\` in program node 1`] = `
Program {
  "children": Array [
    Magic {
      "kind": "magic",
      "loc": Location {
        "end": Position {
          "column": 12,
          "line": 2,
          "offset": 18,
        },
        "source": "__LINE__",
        "start": Position {
          "column": 4,
          "line": 2,
          "offset": 10,
        },
      },
      "raw": "__LINE__",
      "value": "__LINE__",
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 6,
      "line": 3,
      "offset": 25,
    },
    "source": "<?php
    __LINE__
    ?>",
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test AST structure fix #120 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'World'",
          "unicode": false,
          "value": "World",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Inline {
      "kind": "inline",
      "raw": "
 !",
      "value": " !",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure fix #127 - echo statements 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"hello\\"",
          "unicode": false,
          "value": "hello",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Inline {
      "kind": "inline",
      "raw": " world",
      "value": " world",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure fix #127 - inline 1`] = `
Program {
  "children": Array [
    Inline {
      "kind": "inline",
      "raw": "?>?>",
      "value": "?>?>",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test clone 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Clone {
        "kind": "clone",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test coalesce operator 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
      "operator": "=",
      "right": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Boolean {
          "kind": "boolean",
          "raw": "true",
          "value": true,
        },
        "type": "??",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test constants 1`] = `
Program {
  "children": Array [
    Constant {
      "kind": "constant",
      "name": "FOO",
      "value": Number {
        "kind": "number",
        "value": "3.14",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test die/exit 1`] = `
Program {
  "children": Array [
    Exit {
      "kind": "exit",
      "status": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"bye\\"",
        "unicode": false,
        "value": "bye",
      },
      "useDie": true,
    },
    Exit {
      "kind": "exit",
      "status": Number {
        "kind": "number",
        "value": "-1",
      },
      "useDie": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test echo, isset, unset, empty 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        RetIf {
          "falseExpr": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ko\\"",
            "unicode": false,
            "value": "ko",
          },
          "kind": "retif",
          "test": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "expr",
            "parenthesizedExpression": true,
          },
          "trueExpr": String {
            "isDoubleQuote": true,
            "kind": "string",
            "raw": "\\"ok\\"",
            "unicode": false,
            "value": "ok",
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Print {
      "arguments": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"some text\\"",
        "unicode": false,
        "value": "some text",
      },
      "kind": "print",
    },
    Isset {
      "arguments": Array [
        Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
        Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "bar",
        },
      ],
      "kind": "isset",
    },
    Unset {
      "arguments": Array [
        Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      ],
      "kind": "unset",
    },
    Empty {
      "arguments": Array [
        Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "var",
        },
      ],
      "kind": "empty",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test eval 1`] = `
Program {
  "children": Array [
    Eval {
      "kind": "eval",
      "source": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"return true;\\"",
        "unicode": false,
        "value": "return true;",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test include / require 1`] = `
Program {
  "children": Array [
    Include {
      "kind": "include",
      "once": false,
      "require": false,
      "target": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"file.php\\"",
        "unicode": false,
        "value": "file.php",
      },
    },
    Include {
      "kind": "include",
      "once": true,
      "require": false,
      "target": Bin {
        "kind": "bin",
        "left": ConstRef {
          "kind": "constref",
          "name": Identifier {
            "kind": "identifier",
            "name": "PATH",
            "resolution": "uqn",
          },
        },
        "parenthesizedExpression": true,
        "right": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"/file.php\\"",
          "unicode": false,
          "value": "/file.php",
        },
        "type": ".",
      },
    },
    Include {
      "kind": "include",
      "once": false,
      "require": true,
      "target": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"req.php\\"",
        "unicode": false,
        "value": "req.php",
      },
    },
    Include {
      "kind": "include",
      "once": true,
      "require": true,
      "target": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"file.php\\"",
        "unicode": false,
        "value": "file.php",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test inline 1`] = `
Program {
  "children": Array [
    Inline {
      "kind": "inline",
      "raw": "Hello ",
      "value": "Hello ",
    },
    Echo {
      "arguments": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "'World'",
          "unicode": false,
          "value": "World",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Inline {
      "kind": "inline",
      "raw": "
 !",
      "value": " !",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test magics 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Magic {
          "kind": "magic",
          "raw": "__FILE__",
          "value": "__FILE__",
        },
        Magic {
          "kind": "magic",
          "raw": "__DIR__",
          "value": "__DIR__",
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test program 1`] = `
Program {
  "children": Array [],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test shell 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\`ls -larth\`",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "ls -larth",
              "unicode": false,
              "value": "ls -larth",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test AST structure test syntax error 1`] = `"Parse Error : syntax error, unexpected '$b' (T_VARIABLE), expecting ';' on line 3"`;
