// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test strings binary cast 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Cast {
          "kind": "cast",
          "type": "string",
          "what": Encapsed {
            "kind": "encapsed",
            "raw": "\\"\\\\colors[1] contains >$colors[1]<\\\\n\\"",
            "type": "string",
            "value": Array [
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "\\\\colors[1] contains >",
                "value": "\\\\colors[1] contains >",
              },
              OffsetLookup {
                "kind": "offsetlookup",
                "offset": Number {
                  "kind": "number",
                  "value": "1",
                },
                "what": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "colors",
                },
              },
              String {
                "isDoubleQuote": false,
                "kind": "string",
                "raw": "<\\\\n",
                "value": "<
",
              },
            ],
          },
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings check infinite on $ using backquotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\`$",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "$",
              "unicode": false,
              "value": "$",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on $ using doublequotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"$",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "$",
              "unicode": false,
              "value": "$",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "\\"",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\\"' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on $ with arrow 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\` -> $",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " -> $",
              "unicode": false,
              "value": " -> $",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on \${ using backquotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\`\${",
          "type": "shell",
          "value": Array [
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": undefined,
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '}' on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on \${ using doublequotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"\${",
          "type": "string",
          "value": Array [
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": undefined,
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '}' on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "\\"",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\\"' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on \${ with arrow 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\` -> \${",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " -> ",
              "unicode": false,
              "value": " -> ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": undefined,
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "EXPR",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '}' on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on { using backquotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\`{",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "{",
              "unicode": false,
              "value": "{",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on { using doublequotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"{",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "{",
              "unicode": false,
              "value": "{",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "\\"",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\\"' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on { with arrow 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\` -> {",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " -> {",
              "unicode": false,
              "value": " -> {",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on {$ using backquotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\`{$",
          "type": "shell",
          "value": Array [
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": "",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": Array [
        "{",
        "$",
        222,
      ],
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '}' on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on {$ using doublequotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"{$",
          "type": "string",
          "value": Array [
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": "",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": Array [
        "{",
        "$",
        222,
      ],
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '}' on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "\\"",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\\"' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings check infinite on {$ with arrow 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\` -> {$",
          "type": "shell",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " -> ",
              "unicode": false,
              "value": " -> ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": "",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": Array [
        "{",
        "$",
        222,
      ],
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "}",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '}' on line 1",
      "token": "the end of file (EOF)",
    },
    Error {
      "expected": "\`",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, expecting '\`' on line 1",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings encapsed variable / curly constant 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Hello \${ obj }\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "Hello ",
              "unicode": false,
              "value": "Hello ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": ConstRef {
                "kind": "constref",
                "name": Identifier {
                  "kind": "identifier",
                  "name": "obj",
                  "resolution": "uqn",
                },
              },
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings encapsed variable / curly varname 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Hello \${obj}->name !\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "Hello ",
              "unicode": false,
              "value": "Hello ",
            },
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": ConstRef {
                "kind": "constref",
                "name": "obj",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "->name !",
              "unicode": false,
              "value": "->name !",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings encapsed variable / offsetlookup 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"\${$parts[$i]}\\\\n\\"",
          "type": "string",
          "value": Array [
            Variable {
              "byref": false,
              "curly": true,
              "kind": "variable",
              "name": OffsetLookup {
                "kind": "offsetlookup",
                "offset": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "i",
                },
                "what": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "parts",
                },
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "\\\\n",
              "unicode": false,
              "value": "
",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #101 case 1 1`] = `
Program {
  "children": Array [
    Encapsed {
      "kind": "encapsed",
      "raw": "\\"encapsed {$var}\\"",
      "type": "string",
      "value": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "encapsed ",
          "unicode": false,
          "value": "encapsed ",
        },
        Variable {
          "byref": false,
          "curly": true,
          "kind": "variable",
          "name": "var",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #101 case 2 1`] = `
Program {
  "children": Array [
    Encapsed {
      "kind": "encapsed",
      "raw": "\\"encapsed {$arr[0]}\\"",
      "type": "string",
      "value": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "encapsed ",
          "unicode": false,
          "value": "encapsed ",
        },
        OffsetLookup {
          "kind": "offsetlookup",
          "offset": Number {
            "kind": "number",
            "value": "0",
          },
          "what": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "arr",
          },
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #101 case 3 1`] = `
Program {
  "children": Array [
    Encapsed {
      "kind": "encapsed",
      "raw": "\\"encapsed \${var}\\"",
      "type": "string",
      "value": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "encapsed ",
          "unicode": false,
          "value": "encapsed ",
        },
        Variable {
          "byref": false,
          "curly": true,
          "kind": "variable",
          "name": ConstRef {
            "kind": "constref",
            "name": "var",
          },
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #123 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "string",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": false,
        "kind": "string",
        "raw": "'Avoid converting 
 chars, but \\\\' or \\\\\\\\ is ok.'",
        "unicode": false,
        "value": "Avoid converting 
 chars, but ' or \\\\ is ok.",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #124 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "string",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"He drank some $juices[koolaid1] juice.\\"",
        "type": "string",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "He drank some ",
            "unicode": false,
            "value": "He drank some ",
          },
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": ConstRef {
              "kind": "constref",
              "name": "koolaid1",
            },
            "what": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "juices",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": " juice.",
            "unicode": false,
            "value": " juice.",
          },
        ],
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #144 1`] = `
Program {
  "children": Array [
    Encapsed {
      "kind": "encapsed",
      "raw": "\\"encapsed \\\\\\" {$var}\\"",
      "type": "string",
      "value": Array [
        String {
          "isDoubleQuote": false,
          "kind": "string",
          "raw": "encapsed \\\\\\" ",
          "unicode": false,
          "value": "encapsed \\" ",
        },
        Variable {
          "byref": false,
          "curly": true,
          "kind": "variable",
          "name": "var",
        },
      ],
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings fix #149 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "b\\"foo\\\\nbar\\"",
        "unicode": true,
        "value": "foo
bar",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings implement #116 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"foo\\\\nbar\\"",
        "unicode": false,
        "value": "foo
bar",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings test backquotes 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`ls $cwd\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "ls ",
            "unicode": false,
            "value": "ls ",
          },
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "cwd",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`ls \${$cwd}\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "ls ",
            "unicode": false,
            "value": "ls ",
          },
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "cwd",
            },
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`ls {$cwd}\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "ls ",
            "unicode": false,
            "value": "ls ",
          },
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": "cwd",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`$var\`",
        "type": "shell",
        "value": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "var",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`\${var}\`",
        "type": "shell",
        "value": Array [
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": ConstRef {
              "kind": "constref",
              "name": "var",
            },
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`{$var}\`",
        "type": "shell",
        "value": Array [
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": "var",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`\`",
        "type": "shell",
        "value": Array [],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`\\\\\`\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "\\\\\`",
            "unicode": false,
            "value": "\\\\\`",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`{\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "{",
            "unicode": false,
            "value": "{",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`-{\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "-{",
            "unicode": false,
            "value": "-{",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`-$\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "-$",
            "unicode": false,
            "value": "-$",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\`$\`",
        "type": "shell",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "$",
            "unicode": false,
            "value": "$",
          },
        ],
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings test binary with double quotes 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "b\\"\\\\colors contains >$colors<\\\\n\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "\\\\colors contains >",
              "unicode": false,
              "value": "\\\\colors contains >",
            },
            Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "colors",
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "<\\\\n",
              "unicode": false,
              "value": "<
",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings test double quotes 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"$\\"",
        "unicode": false,
        "value": "$",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"{\\"",
        "unicode": false,
        "value": "{",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"-$-\\"",
        "unicode": false,
        "value": "-$-",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"-{\\"",
        "unicode": false,
        "value": "-{",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"$b\\"",
        "type": "string",
        "value": Array [
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"{$b}\\"",
        "type": "string",
        "value": Array [
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": "b",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"\${$b}\\"",
        "type": "string",
        "value": Array [
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"-$b?\\"",
        "type": "string",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "-",
            "unicode": false,
            "value": "-",
          },
          Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "b",
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "?",
            "unicode": false,
            "value": "?",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"-{$b}\\"",
        "type": "string",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "-",
            "unicode": false,
            "value": "-",
          },
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": "b",
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "raw": "\\"-\${$b}\\"",
        "type": "string",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "-",
            "unicode": false,
            "value": "-",
          },
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "b",
            },
          },
        ],
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"\\"",
        "unicode": false,
        "value": "",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"\\\\\\"\\"",
        "unicode": false,
        "value": "\\"",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings test empty nowdoc & heredoc contents 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "label": "HDOC",
          "raw": "
      HDOC
      ;
      echo <<<'NDOC'
      NDOC
      ;
    ",
          "type": "heredoc",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "      HDOC
      ;
      echo <<<'NDOC'
      NDOC
      ;
    ",
              "unicode": false,
              "value": "      HDOC
      ;
      echo <<<'NDOC'
      NDOC
      ;
    ",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [
    Error {
      "expected": 220,
      "kind": "error",
      "line": 8,
      "message": "Parse Error : syntax error, expecting T_END_HEREDOC on line 8",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings test encapsed elements 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "code",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "label": "EOFX",
        "raw": "
{$this->docStar}
\${$foo}
\${targetDirs[1]}
$test[1]
$test->foo
EOFX",
        "type": "heredoc",
        "value": Array [
          PropertyLookup {
            "kind": "propertylookup",
            "offset": ConstRef {
              "kind": "constref",
              "name": "docStar",
            },
            "what": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "this",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "
",
            "unicode": false,
            "value": "
",
          },
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "foo",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "
",
            "unicode": false,
            "value": "
",
          },
          Variable {
            "byref": false,
            "curly": true,
            "kind": "variable",
            "name": OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "1",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "targetDirs",
              },
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "
",
            "unicode": false,
            "value": "
",
          },
          OffsetLookup {
            "kind": "offsetlookup",
            "offset": Number {
              "kind": "number",
              "value": "1",
            },
            "what": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "
",
            "unicode": false,
            "value": "
",
          },
          PropertyLookup {
            "kind": "propertylookup",
            "offset": ConstRef {
              "kind": "constref",
              "name": "foo",
            },
            "what": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "test",
            },
          },
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "
",
            "unicode": false,
            "value": "
",
          },
        ],
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings test encapsed variable 1`] = `
Program {
  "children": Array [
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Hello $obj->name !\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "Hello ",
              "unicode": false,
              "value": "Hello ",
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": ConstRef {
                "kind": "constref",
                "name": "name",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": " !",
              "unicode": false,
              "value": " !",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Hello $obj->foo->bar !\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "Hello ",
              "unicode": false,
              "value": "Hello ",
            },
            PropertyLookup {
              "kind": "propertylookup",
              "offset": ConstRef {
                "kind": "constref",
                "name": "foo",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "->bar !",
              "unicode": false,
              "value": "->bar !",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
    Echo {
      "arguments": Array [
        Encapsed {
          "kind": "encapsed",
          "raw": "\\"Hello $obj[1]->foo !\\"",
          "type": "string",
          "value": Array [
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "Hello ",
              "unicode": false,
              "value": "Hello ",
            },
            OffsetLookup {
              "kind": "offsetlookup",
              "offset": Number {
                "kind": "number",
                "value": "1",
              },
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "obj",
              },
            },
            String {
              "isDoubleQuote": false,
              "kind": "string",
              "raw": "->foo !",
              "unicode": false,
              "value": "->foo !",
            },
          ],
        },
      ],
      "kind": "echo",
      "shortForm": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test strings test heredoc end of doc 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Encapsed {
        "kind": "encapsed",
        "label": "EOF2",
        "raw": "
SOMETHING",
        "type": "heredoc",
        "value": Array [
          String {
            "isDoubleQuote": false,
            "kind": "string",
            "raw": "SOMETHING",
            "unicode": false,
            "value": "SOMETHING",
          },
        ],
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": 220,
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, expecting T_END_HEREDOC on line 2",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings test nowdoc end of doc 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Nowdoc {
        "kind": "nowdoc",
        "label": "EOF2",
        "quote": true,
        "raw": "<<<'EOF2'
FOO",
        "value": "FOO",
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": 220,
      "kind": "error",
      "line": 2,
      "message": "Parse Error : syntax error, expecting T_END_HEREDOC on line 2",
      "token": "the end of file (EOF)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test strings test nowdoc label and contents 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "code",
      },
      "operator": ".=",
      "right": Nowdoc {
        "kind": "nowdoc",
        "label": "EOF",
        "quote": true,
        "raw": "<<<'EOF'
  }
EOF;",
        "value": "  }",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
