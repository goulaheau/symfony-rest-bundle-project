// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test statements halt statements test fallback 1`] = `
Program {
  "children": Array [
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Halt {
            "after": "
        }
        $b = 1;
      ",
            "kind": "halt",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 3,
      "message": "__HALT_COMPILER() can only be used from the outermost scope on line 3",
      "token": undefined,
    },
  ],
  "kind": "program",
}
`;

exports[`Test statements halt statements test halt statement 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
    Halt {
      "after": "
        $b = 1;
      ",
      "kind": "halt",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test statements test declare 1`] = `
Program {
  "children": Array [
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          Declare {
            "children": Array [],
            "kind": "declare",
            "mode": "none",
            "what": Object {
              "ticks": Number {
                "kind": "number",
                "value": "1",
              },
            },
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
    Declare {
      "children": Array [],
      "kind": "declare",
      "mode": "none",
      "what": Object {
        "encoding": Bin {
          "kind": "bin",
          "left": Bin {
            "kind": "bin",
            "left": ConstRef {
              "kind": "constref",
              "name": Identifier {
                "kind": "identifier",
                "name": "ISO",
                "resolution": "uqn",
              },
            },
            "right": Number {
              "kind": "number",
              "value": "8859",
            },
            "type": "-",
          },
          "right": Number {
            "kind": "number",
            "value": "1",
          },
          "type": "-",
        },
        "ticks": Number {
          "kind": "number",
          "value": "2",
        },
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
    Declare {
      "children": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "c",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "2",
          },
        },
      ],
      "kind": "declare",
      "mode": "block",
      "what": Object {
        "ticks": Number {
          "kind": "number",
          "value": "1",
        },
      },
    },
    Declare {
      "children": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "d",
          },
          "operator": "=",
          "right": Number {
            "kind": "number",
            "value": "3",
          },
        },
      ],
      "kind": "declare",
      "mode": "short",
      "what": Object {
        "encoding": String {
          "isDoubleQuote": true,
          "kind": "string",
          "raw": "\\"UTF-8\\"",
          "unicode": false,
          "value": "UTF-8",
        },
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "e",
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "4",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test statements test global 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "body": Block {
        "children": Array [
          Global {
            "items": Array [
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "b",
              },
            ],
            "kind": "global",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": "foo",
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test statements test goto label 1`] = `
Program {
  "children": Array [
    Label {
      "kind": "label",
      "name": "start",
    },
    Post {
      "kind": "post",
      "type": "+",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "i",
      },
    },
    Goto {
      "kind": "goto",
      "label": "start",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test statements test inner statements 1`] = `
Program {
  "children": Array [
    If {
      "alternate": null,
      "body": Block {
        "children": Array [
          _Function {
            "arguments": Array [],
            "body": Block {
              "children": Array [],
              "kind": "block",
            },
            "byref": false,
            "kind": "function",
            "name": "foo",
            "nullable": false,
            "type": null,
          },
          Class {
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": true,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "name": "foo",
          },
          Class {
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": true,
            "kind": "class",
            "name": "foo",
          },
          Class {
            "body": Array [],
            "extends": null,
            "implements": null,
            "isAbstract": false,
            "isAnonymous": false,
            "isFinal": false,
            "kind": "class",
            "name": "foo",
          },
          Trait {
            "body": Array [],
            "extends": null,
            "implements": null,
            "kind": "trait",
            "name": "foo",
          },
          Interface {
            "body": Array [],
            "extends": null,
            "kind": "interface",
            "name": "foo",
          },
        ],
        "kind": "block",
      },
      "kind": "if",
      "shortForm": false,
      "test": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test statements test static 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "body": Block {
        "children": Array [
          Static {
            "items": Array [
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
              Assign {
                "kind": "assign",
                "left": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "b",
                },
                "operator": null,
                "right": Number {
                  "kind": "number",
                  "value": "5",
                },
              },
            ],
            "kind": "static",
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": "foo",
      "nullable": false,
      "type": null,
    },
    Static {
      "items": Array [
        Assign {
          "kind": "assign",
          "left": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "sVar1",
          },
          "operator": null,
          "right": Number {
            "kind": "number",
            "value": "11",
          },
        },
      ],
      "kind": "static",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test statements test try 1`] = `
Program {
  "children": Array [
    Try {
      "always": Block {
        "children": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Identifier {
              "kind": "identifier",
              "name": "clean",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "block",
      },
      "body": Block {
        "children": Array [
          Call {
            "arguments": Array [],
            "kind": "call",
            "what": Identifier {
              "kind": "identifier",
              "name": "foo",
              "resolution": "uqn",
            },
          },
        ],
        "kind": "block",
      },
      "catches": Array [
        Catch {
          "body": Block {
            "children": Array [
              Call {
                "arguments": Array [
                  Variable {
                    "byref": false,
                    "curly": false,
                    "kind": "variable",
                    "name": "err",
                  },
                ],
                "kind": "call",
                "what": Identifier {
                  "kind": "identifier",
                  "name": "var_dump",
                  "resolution": "uqn",
                },
              },
              Throw {
                "kind": "throw",
                "what": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "err",
                },
              },
            ],
            "kind": "block",
          },
          "kind": "catch",
          "variable": Variable {
            "byref": false,
            "curly": false,
            "kind": "variable",
            "name": "err",
          },
          "what": Array [
            Identifier {
              "kind": "identifier",
              "name": "FooError",
              "resolution": "uqn",
            },
            Identifier {
              "kind": "identifier",
              "name": "BarError",
              "resolution": "uqn",
            },
          ],
        },
      ],
      "kind": "try",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
