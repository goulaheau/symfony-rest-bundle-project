// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test expressions chaining calls (derefenceable) 1`] = `
Program {
  "children": Array [
    PropertyLookup {
      "kind": "propertylookup",
      "offset": ConstRef {
        "kind": "constref",
        "name": "bar",
      },
      "what": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Number {
          "kind": "number",
          "value": "10",
        },
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": ConstRef {
            "kind": "constref",
            "name": "foo",
          },
          "what": Call {
            "arguments": Array [],
            "kind": "call",
            "what": StaticLookup {
              "kind": "staticlookup",
              "offset": ConstRef {
                "kind": "constref",
                "name": "call",
              },
              "what": PropertyLookup {
                "kind": "propertylookup",
                "offset": ConstRef {
                  "kind": "constref",
                  "name": "b",
                },
                "parenthesizedExpression": true,
                "what": Variable {
                  "byref": false,
                  "curly": false,
                  "kind": "variable",
                  "name": "a",
                },
              },
            },
          },
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 2`] = `
Program {
  "children": Array [
    PropertyLookup {
      "kind": "propertylookup",
      "offset": ConstRef {
        "kind": "constref",
        "name": "foo",
      },
      "what": OffsetLookup {
        "kind": "offsetlookup",
        "offset": Number {
          "kind": "number",
          "value": "0",
        },
        "what": Array {
          "items": Array [
            Number {
              "kind": "number",
              "value": "1",
            },
            Number {
              "kind": "number",
              "value": "2",
            },
            Number {
              "kind": "number",
              "value": "3",
            },
          ],
          "kind": "array",
          "shortForm": false,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 3`] = `
Program {
  "children": Array [
    Call {
      "arguments": Array [],
      "kind": "call",
      "what": StaticLookup {
        "kind": "staticlookup",
        "offset": ConstRef {
          "kind": "constref",
          "name": "foo",
        },
        "what": PropertyLookup {
          "kind": "propertylookup",
          "offset": Encapsed {
            "kind": "encapsed",
            "type": "offset",
            "value": Array [
              ConstRef {
                "kind": "constref",
                "name": "bar",
              },
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "baz",
              },
            ],
          },
          "what": Call {
            "arguments": Array [
              Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "foo",
              },
            ],
            "kind": "call",
            "what": Post {
              "kind": "post",
              "parenthesizedExpression": true,
              "type": "+",
              "what": Variable {
                "byref": false,
                "curly": false,
                "kind": "variable",
                "name": "a",
              },
            },
          },
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 4`] = `
Program {
  "children": Array [
    Post {
      "kind": "post",
      "parenthesizedExpression": true,
      "type": "+",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
    },
    StaticLookup {
      "kind": "staticlookup",
      "offset": ConstRef {
        "kind": "constref",
        "name": "baz",
      },
      "what": StaticLookup {
        "kind": "staticlookup",
        "offset": ConstRef {
          "kind": "constref",
          "name": "foo",
        },
        "what": Identifier {
          "kind": "identifier",
          "name": "bar",
          "resolution": "uqn",
        },
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": ";",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected 'bar' (T_STRING), expecting ';' on line 1",
      "token": "'bar' (T_STRING)",
    },
    Error {
      "expected": undefined,
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '::' (T_DOUBLE_COLON) on line 1",
      "token": "'::' (T_DOUBLE_COLON)",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions chaining calls (derefenceable) 5`] = `
Program {
  "children": Array [
    Call {
      "arguments": Array [],
      "kind": "call",
      "what": StaticLookup {
        "kind": "staticlookup",
        "offset": ConstRef {
          "kind": "constref",
          "name": "baz",
        },
        "what": Call {
          "arguments": Array [],
          "kind": "call",
          "what": StaticLookup {
            "kind": "staticlookup",
            "offset": ConstRef {
              "kind": "constref",
              "name": "foo",
            },
            "what": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Identifier {
                "kind": "identifier",
                "name": "bar",
                "resolution": "uqn",
              },
            },
          },
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions should assign class static 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": StaticLookup {
        "kind": "staticlookup",
        "offset": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "b",
        },
        "what": Identifier {
          "kind": "identifier",
          "name": "a",
          "resolution": "uqn",
        },
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions should fail to assign class constants 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": StaticLookup {
        "kind": "staticlookup",
        "offset": ConstRef {
          "kind": "constref",
          "name": "b",
        },
        "what": Identifier {
          "kind": "identifier",
          "name": "foo",
          "resolution": "uqn",
        },
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": "VARIABLE",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '=' on line 1",
      "token": "'='",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions should fail to assign constants 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": ConstRef {
        "kind": "constref",
        "name": Identifier {
          "kind": "identifier",
          "name": "a",
          "resolution": "uqn",
        },
      },
      "operator": "=",
      "right": Number {
        "kind": "number",
        "value": "1",
      },
    },
  ],
  "errors": Array [
    Error {
      "expected": "VARIABLE",
      "kind": "error",
      "line": 1,
      "message": "Parse Error : syntax error, unexpected '=' on line 1",
      "token": "'='",
    },
  ],
  "kind": "program",
}
`;

exports[`Test expressions test assignements 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": ".=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "+=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "-=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "*=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "**=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "/=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "&=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "|=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "%=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "^=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "<<=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": ">>=",
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test binary 1`] = `
Program {
  "children": Array [
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "|",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "&",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "^",
    },
    Bin {
      "kind": "bin",
      "left": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"1\\"",
        "unicode": false,
        "value": "1",
      },
      "right": String {
        "isDoubleQuote": true,
        "kind": "string",
        "raw": "\\"3\\"",
        "unicode": false,
        "value": "3",
      },
      "type": ".",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "+",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "-",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "*",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "/",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "%",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "**",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": "<<",
    },
    Bin {
      "kind": "bin",
      "left": Number {
        "kind": "number",
        "value": "1",
      },
      "right": Number {
        "kind": "number",
        "value": "3",
      },
      "type": ">>",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test cast 1`] = `
Program {
  "children": Array [
    Cast {
      "kind": "cast",
      "raw": "(int)",
      "type": "int",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(integer)",
      "type": "int",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(bool)",
      "type": "bool",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(boolean)",
      "type": "bool",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(float)",
      "type": "float",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(double)",
      "type": "float",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(real)",
      "type": "float",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(string)",
      "type": "string",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(binary)",
      "type": "binary",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(array)",
      "type": "array",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(object)",
      "type": "object",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Cast {
      "kind": "cast",
      "raw": "(unset)",
      "type": "unset",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test cast extension - #171 1`] = `
Program {
  "children": Array [
    Variable {
      "byref": false,
      "cast": "int",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(int)",
    },
    Variable {
      "byref": false,
      "cast": "int",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(integer)",
    },
    Variable {
      "byref": false,
      "cast": "bool",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(bool)",
    },
    Variable {
      "byref": false,
      "cast": "bool",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(boolean)",
    },
    Variable {
      "byref": false,
      "cast": "float",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(float)",
    },
    Variable {
      "byref": false,
      "cast": "float",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(double)",
    },
    Variable {
      "byref": false,
      "cast": "float",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(real)",
    },
    Variable {
      "byref": false,
      "cast": "string",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(string)",
    },
    Variable {
      "byref": false,
      "cast": "binary",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(binary)",
    },
    Variable {
      "byref": false,
      "cast": "array",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(array)",
    },
    Variable {
      "byref": false,
      "cast": "object",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(object)",
    },
    Variable {
      "byref": false,
      "cast": "unset",
      "curly": false,
      "kind": "variable",
      "name": "var",
      "rawCast": "(unset)",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test exit 1`] = `
Program {
  "children": Array [
    Exit {
      "kind": "exit",
      "status": Number {
        "kind": "number",
        "value": "1",
      },
      "useDie": false,
    },
    Exit {
      "kind": "exit",
      "status": null,
      "useDie": true,
    },
    Exit {
      "kind": "exit",
      "status": null,
      "useDie": false,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test generators 1`] = `
Program {
  "children": Array [
    _Function {
      "arguments": Array [],
      "body": Block {
        "children": Array [
          Yield {
            "key": null,
            "kind": "yield",
            "value": Number {
              "kind": "number",
              "value": "0",
            },
          },
          YieldFrom {
            "kind": "yieldfrom",
            "value": Call {
              "arguments": Array [],
              "kind": "call",
              "what": Identifier {
                "kind": "identifier",
                "name": "foo",
                "resolution": "uqn",
              },
            },
          },
          Yield {
            "key": Number {
              "kind": "number",
              "value": "1",
            },
            "kind": "yield",
            "value": Variable {
              "byref": false,
              "curly": false,
              "kind": "variable",
              "name": "a",
            },
          },
        ],
        "kind": "block",
      },
      "byref": false,
      "kind": "function",
      "name": "gen",
      "nullable": false,
      "type": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test if based returns 1`] = `
Program {
  "children": Array [
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Boolean {
        "kind": "boolean",
        "raw": "false",
        "value": false,
      },
      "type": "??",
    },
    RetIf {
      "falseExpr": Boolean {
        "kind": "boolean",
        "raw": "false",
        "value": false,
      },
      "kind": "retif",
      "test": Bin {
        "kind": "bin",
        "left": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "a",
        },
        "right": Number {
          "kind": "number",
          "value": "5",
        },
        "type": ">",
      },
      "trueExpr": Boolean {
        "kind": "boolean",
        "raw": "true",
        "value": true,
      },
    },
    RetIf {
      "falseExpr": Boolean {
        "kind": "boolean",
        "raw": "false",
        "value": false,
      },
      "kind": "retif",
      "test": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "trueExpr": null,
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test incr/decr 1`] = `
Program {
  "children": Array [
    Post {
      "kind": "post",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 2,
          "offset": 12,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 2,
          "offset": 7,
        },
      },
      "type": "+",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 2,
            "offset": 9,
          },
          "source": null,
          "start": Position {
            "column": 6,
            "line": 2,
            "offset": 7,
          },
        },
        "name": "i",
      },
    },
    Post {
      "kind": "post",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 3,
          "offset": 24,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 3,
          "offset": 19,
        },
      },
      "type": "-",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 8,
            "line": 3,
            "offset": 21,
          },
          "source": null,
          "start": Position {
            "column": 6,
            "line": 3,
            "offset": 19,
          },
        },
        "name": "i",
      },
    },
    Pre {
      "kind": "pre",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 4,
          "offset": 36,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 4,
          "offset": 31,
        },
      },
      "type": "+",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 4,
            "offset": 35,
          },
          "source": null,
          "start": Position {
            "column": 8,
            "line": 4,
            "offset": 33,
          },
        },
        "name": "i",
      },
    },
    Pre {
      "kind": "pre",
      "loc": Location {
        "end": Position {
          "column": 11,
          "line": 5,
          "offset": 48,
        },
        "source": null,
        "start": Position {
          "column": 6,
          "line": 5,
          "offset": 43,
        },
      },
      "type": "-",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "loc": Location {
          "end": Position {
            "column": 10,
            "line": 5,
            "offset": 47,
          },
          "source": null,
          "start": Position {
            "column": 8,
            "line": 5,
            "offset": 45,
          },
        },
        "name": "i",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
  "loc": Location {
    "end": Position {
      "column": 4,
      "line": 6,
      "offset": 53,
    },
    "source": null,
    "start": Position {
      "column": 0,
      "line": 1,
      "offset": 0,
    },
  },
}
`;

exports[`Test expressions test more binary ops (formerly bool) 1`] = `
Program {
  "children": Array [
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "&&",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "and",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "||",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "or",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "xor",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "===",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "!==",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "==",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "!=",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": ">",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "<",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": ">=",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "<=",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "<=>",
    },
    Bin {
      "kind": "bin",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "right": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "type": "instanceof",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test nested expressions precedence 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "5",
          },
          "right": Number {
            "kind": "number",
            "value": "2",
          },
          "type": "*",
        },
        "right": Number {
          "kind": "number",
          "value": "1",
        },
        "type": "+",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "b",
      },
      "operator": "=",
      "right": Bin {
        "kind": "bin",
        "left": Number {
          "kind": "number",
          "value": "5",
        },
        "right": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "2",
          },
          "parenthesizedExpression": true,
          "right": Number {
            "kind": "number",
            "value": "1",
          },
          "type": "+",
        },
        "type": "*",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "c",
      },
      "operator": "=",
      "right": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "1",
          },
          "right": Bin {
            "kind": "bin",
            "left": Number {
              "kind": "number",
              "value": "2",
            },
            "right": Number {
              "kind": "number",
              "value": "3",
            },
            "type": "/",
          },
          "type": "+",
        },
        "right": Number {
          "kind": "number",
          "value": "4",
        },
        "type": "+",
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "d",
      },
      "operator": "=",
      "right": Bin {
        "kind": "bin",
        "left": Bin {
          "kind": "bin",
          "left": Number {
            "kind": "number",
            "value": "1",
          },
          "right": Number {
            "kind": "number",
            "value": "2",
          },
          "type": "!==",
        },
        "right": Number {
          "kind": "number",
          "value": "3",
        },
        "type": "&&",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test new 1`] = `
Program {
  "children": Array [
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": New {
        "arguments": Array [],
        "kind": "new",
        "what": Identifier {
          "kind": "identifier",
          "name": "\\\\foo",
          "resolution": "qn",
        },
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": New {
        "arguments": Array [],
        "kind": "new",
        "what": StaticLookup {
          "kind": "staticlookup",
          "offset": ConstRef {
            "kind": "constref",
            "name": "class",
          },
          "what": Identifier {
            "kind": "identifier",
            "name": "foo",
            "resolution": "rn",
          },
        },
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": New {
        "arguments": Array [],
        "kind": "new",
        "what": Variable {
          "byref": false,
          "curly": false,
          "kind": "variable",
          "name": "foo",
        },
      },
    },
    Assign {
      "kind": "assign",
      "left": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "a",
      },
      "operator": "=",
      "right": New {
        "arguments": Array [],
        "kind": "new",
        "what": Class {
          "body": Array [],
          "extends": Identifier {
            "kind": "identifier",
            "name": "foo",
            "resolution": "uqn",
          },
          "implements": Array [
            Identifier {
              "kind": "identifier",
              "name": "bar",
              "resolution": "uqn",
            },
          ],
          "isAbstract": false,
          "isAnonymous": true,
          "isFinal": false,
          "kind": "class",
          "name": null,
        },
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test silent 1`] = `
Program {
  "children": Array [
    Silent {
      "expr": Call {
        "arguments": Array [],
        "kind": "call",
        "what": Identifier {
          "kind": "identifier",
          "name": "trigger_error",
          "resolution": "uqn",
        },
      },
      "kind": "silent",
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;

exports[`Test expressions test unary 1`] = `
Program {
  "children": Array [
    Unary {
      "kind": "unary",
      "type": "+",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Unary {
      "kind": "unary",
      "type": "~",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Unary {
      "kind": "unary",
      "type": "!",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
    Unary {
      "kind": "unary",
      "type": "-",
      "what": Variable {
        "byref": false,
        "curly": false,
        "kind": "variable",
        "name": "var",
      },
    },
  ],
  "errors": Array [],
  "kind": "program",
}
`;
